;; (woo:run
;;   (lambda (env)
;;     (declare (ignore env))
;;     '(200 (:content-type "text/plain") ("Hello, World"))))

(defpackage :main
  (:use :common-lisp))
;;  (:export
;;   #:main))

(in-package :main)

;(declaim (optimize (speed 3) (space 0) (debug 0)))
;(proclaim '(optimize (debug 0)))


;;(ql:quickload :clack)
;;(ql:quickload :woo)
;;(ql:quickload :ningle)
;;(ql:quickload :cl-json)
;;(ql:quickload :local-time)
;;(ql:quickload :parse-number)


(setf woo:*default-worker-num* 2)

(defun zmy-date-converter-in (date-string)
  "convert date from format |dd*mm*yyyy| to timestamp - * - any one character"
  (let ((day (subseq date-string 1 3))
	(month (subseq date-string 4 6))
	(year (subseq date-string 7 11)))
    (local-time:parse-timestring (concatenate 'string year "-" month "-" day))))

(defun zmy-date-converter-out (local-date)
  "convert timestamp into format dd.mm.yyyy"
  (let ((local-date-string (write-to-string local-date)))
    (concatenate 'string
		 (subseq local-date-string 9 11)
		 "."
		 (subseq local-date-string 6 8)
		 "."
		 (subseq local-date-string 1 5))))

(defun zmy-get-timestamp-with-month-offset (local-date num-offset)
  (local-time:adjust-timestamp local-date (offset :month num-offset)))

(defun round-to-ratio (number precision &optional (round-function #'round))
  "Округляет число NUMBER до количества знаков PRECISION, если PRECISION
отрицательно, то происходит потеря разрядов. Возвращает рациональное число,
ROUND-FUNCTION - округляющая функция, например:
  #'floor
  #'ceil
  #'truncate
  #'round (по-умолчанию)."
  (let ((div (expt 10 precision)))
    (/ (funcall round-function (* number div)) div)))

(defun round-to-float (number precision &optional (round-function #'round))
  "Округляет число NUMBER до количества знаков PRECISION, если PRECISION
отрицательно, то происходит потеря разрядов. Возвращает дробное число.
ROUND-FUNCTION - округляющая функция, например:
  #'floor
  #'ceil
  #'truncate
  #'round (по-умолчанию)."
  (float (round-to-ratio number precision round-function)))

(defun zmy-validation (zdate zrate zperiods zamount)
  "check params"
  (if (or (eq zdate nil)
	  (eq zrate nil)
	  (eq zperiods nil)
	  (eq zamount nil)
	  (> zrate 8)
	  (< zrate 1)
	  (< zamount 10000)
	  (> zamount 3000000)
	  (> zperiods 60)
	  (< zperiods 1))
      t nil))  

(defun mdeposit-pre (params)
;;  (zmy-validation params)
  (let ((zdate (write-to-string (cdr (assoc "date" params :test #'string=))))
	(zrate (cdr (assoc "rate" params :test #'string=)))
	(zperiods (cdr (assoc "periods" params :test #'string=)))
	(zamount (cdr (assoc "amount" params :test #'string=)))
	(loop-res '())
	(loop-res2 '()))
    (if (zmy-validation zdate zrate zperiods zamount) (return-from mdeposit-pre loop-res2)) ; `(400 (content-type "application/json" "{\"error\" : \" my taste \" }"))))
 ;  (if (not zdate) `(400 (content-type "application/json" "{ \"error\" }")) "ok")
    (let ((ztimestamp (zmy-date-converter-in zdate))
	  (cumm-amount zamount))   
      (loop :for x :from 0 :to (- zperiods 1) :do
	 (push (zmy-get-timestamp-with-month-offset ztimestamp x) loop-res))
      (setf loop-res (nreverse loop-res))
      (loop :for y :in loop-res :do
	 (setf cumm-amount (* cumm-amount (+ 1 (/ zrate 12 100))))
	 (push (cons (zmy-date-converter-out y) (round-to-float cumm-amount 2)) loop-res2)
;	 (push (cons (zmy-date-converter-out y) (write-to-string (round-to-float cumm-amount 2))) loop-res2)
	 )) loop-res2 ))

(defun mdeposit (params)
  (let ((loop-res2 (mdeposit-pre params))
	(loop-res3 '()))
    (push "{" loop-res3)
    (cond ((eq loop-res2 nil)
	   `(400 (content-type "application/json") "{ \"error\": \" description of error in my taste \"}" ))
	  (t (loop :for x :in (nreverse loop-res2) :do
		(push (concatenate 'string
				   "\""
				   (car x)
				   "\": "
				   (write-to-string (cdr x)) )
		      loop-res3))
	     (push "}" loop-res3)
	     `(200 (content-type "application/json") ,(nreverse loop-res3))
	     ))))

(defun adeposit (params)
  (let ((loop-res2 (mdeposit-pre params)))
    (let ((last-sum (cdr (car loop-res2))) ;(parse-number:parse-number (substitute #\. #\, (write-to-string (cdr (car loop-res2))))))
	  (init-sum (cdr (assoc "amount" params :test #'string=)))) ;(parse-number:parse-number (substitute #\. #\, (write-to-string (cdr (assoc "amount" params :test #'string=)))))))
					;      (format t "~A" loop-res2)
      (cond ((eq loop-res2 nil)
	     `(400 (content-type "application/json") "{ \"error\": \" description of error in my taste \"}" ))
	     (t `(200 (:content-type "application/json") ,(concatenate 'string
							     "{ \"profit\": "
							     (write-to-string (round-to-float (- last-sum init-sum) 2))
							     "}")))))))
; (- last-sum init-sum))))
      
(defvar *app* (make-instance 'ningle:app))

(defun main()   

  (setf (ningle:route *app* "/mdeposit" :method :POST)
	#'(lambda (params)
	    (mdeposit params)))
  
  (setf (ningle:route *app* "/adeposit" :method :POST)
	#'(lambda (params)
	    (adeposit params)))
  
  (clack:clackup *app* :port 8080 :address "0.0.0.0" :server :woo)

  (loop :do (sleep 5))
  
 )

;; ab -p post_loc.txt -T application/json -c 50 -n 100000 http://127.0.0.1:8080/mdeposit

;; wrk -t12 -c400 -d30s -H "Connection: Close" -s post.lua http://127.0.0.1:8080/mdeposit 
